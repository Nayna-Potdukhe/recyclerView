The RecyclerView widget is a more advanced and flexible version of ListView.

In the RecyclerView model, several different components work together to display your data.
The overall container for your user interface is a RecyclerView object that you add to your layout. 
The RecyclerView fills itself with views provided by a layout manager that you provide. 
You can use one of our standard layout managers (such as LinearLayoutManager or GridLayoutManager), or implement your own.

The views in the list are represented by view holder objects.
These objects are instances of a class you define by extending RecyclerView.ViewHolder. 
Each view holder is in charge of displaying a single item with a view. 
For example, if your list shows music collection, each view holder might represent a single album. 
The RecyclerView creates only as many view holders as are needed to display the on-screen portion of the dynamic content, plus a few extra. 
As the user scrolls through the list, the RecyclerView takes the off-screen views and rebinds them to the data which is scrolling onto the screen.

The view holder objects are managed by an adapter, which you create by extending RecyclerView.Adapter. 
The adapter creates view holders as needed. The adapter also binds the view holders to their data. 
It does this by assigning the view holder to a position, and calling the adapter's onBindViewHolder() method. 
That method uses the view holder's position to determine what the contents should be, based on its list position.
